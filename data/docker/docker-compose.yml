version: '3.4'
networks:
  data-cluster:

services:
  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    restart: always
    networks:
      - data-cluster

  mongodb-primary:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb1
    command: "mongod --keyFile /mongodb/keyfile/key --replSet mongo-replica"
    ports:
      - ${MONGODB_SET1_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    restart: unless-stopped
    volumes:
      - ./mongodb/keyfile/key:/mongodb/keyfile/key:ro
      - ./mongodb/db1:/data/mongodb/db
    networks:
      - data-cluster

  mongodb-secondary-1:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb2
    command: "mongod --keyFile /mongodb/keyfile/key --replSet mongo-replica"
    ports:
      - ${MONGODB_SET2_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    restart: unless-stopped
    volumes:
      - ./mongodb/keyfile/key:/mongodb/keyfile/key:ro
      - ./mongodb/db2:/data/mongodb/db
    networks:
      - data-cluster

  mongodb-secondary-2:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb3
    command: "mongod --keyFile /mongodb/keyfile/key --replSet mongo-replica"
    ports:
      - ${MONGODB_SET3_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    restart: unless-stopped
    volumes:
      - ./mongodb/keyfile/key:/mongodb/keyfile/key:ro
      - ./mongodb/db3:/data/mongodb/db
    networks:
      - data-cluster

  mongo-setup:
    image: mongo:${MONGODB_VERSION}
    depends_on:
      - mongodb-primary
      - mongodb-secondary-1
      - mongodb-secondary-2
    restart: "no"
    networks:
      - data-cluster
    volumes:
      - ./scripts:/scripts
    environment:
      DB_USERNAME: ${MONGODB_USERNAME}
      DB_PASSWORD: ${MONGODB_PASSWORD}
    entrypoint: [ "bash", "-c", "sh ./scripts/mongo_init.sh" ]

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOST: redis-master
      REDIS_PASSWORD: ${REDIS_MASTER_PASSWORD}
    ports:
      - 8081:8081
    depends_on:
      - redis-master
    restart:
      unless-stopped
    networks:
      - data-cluster

  redis-master:
    image: redis:${REDIS_VERSION}
    container_name: redis-master
    command: [ "redis-server", "--requirepass", "${REDIS_MASTER_PASSWORD}" ]
    ports:
      - ${REDIS_MASTER_PORT}:6379
    restart: always
    networks:
      - data-cluster

  redis-node-1:
    image: redis:${REDIS_VERSION}
    container_name: redis-node-1
    command:
      - "redis-server"
      - "--slaveof redis-master 6379"
      - "--requirepass ${REDIS_NODE_PASSWORD}"
      - "--masterauth ${REDIS_MASTER_PASSWORD}"
    ports:
      - ${REDIS_NODE_1_PORT}:6379
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      - data-cluster

  redis-node-2:
    image: redis:${REDIS_VERSION}
    container_name: redis-node-2
    command:
      - "redis-server"
      - "--slaveof redis-master 6379"
      - "--requirepass ${REDIS_NODE_PASSWORD}"
      - "--masterauth ${REDIS_MASTER_PASSWORD}"
    ports:
      - ${REDIS_NODE_2_PORT}:6379
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      - data-cluster

volumes:
  portainer_data: